<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://code.alibabatech.com/schema/dubbo
						http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
                     http://www.springframework.org/schema/security
                     http://www.springframework.org/schema/security/spring-security.xsd">

    <!--配置哪些资源匿名可以访问（不登录也可以访问），没有经过SpringSecurity的拦截 -->
    <!-- 静态资源，登录页，（注册页，注册请求） -->
    <security:http security="none" pattern="/login.html"></security:http>
    <security:http security="none" pattern="/css/**"></security:http>
    <security:http security="none" pattern="/img/**"></security:http>
    <security:http security="none" pattern="/js/**"></security:http>
    <security:http security="none" pattern="/plugins/**"></security:http>
    <!--
        auto-config:自动配置，如果设置为true，表示自动应用一些默认配置[框架会自动生成登录页]
        use-expressions:是否使用spring security提供的表达式来描述权限
			SPEL(Spring EL的表达式)
    -->
    <security:http auto-config="true" use-expressions="true">
        <security:headers>
            <!-- 同源策略，不使用该策略，框架默认会禁用前端页面的一些框架 iframe -->
            <!--设置在页面可以通过iframe访问受保护的页面，默认为不允许访问
				policy 默认值为 DENY
			-->
            <security:frame-options policy="SAMEORIGIN"></security:frame-options>
        </security:headers>
        <!--配置拦截规则，/** 表示拦截所有请求-->
        <!--
            pattern:描述拦截规则
            asscess:指定访问资源所需的角色或者权限
				isAuthenticated() 只需认证通过即可
				hasRole('ROLE_ADMIN') 需要ROLE_ADMIN角色才能访问资源
				hasAuthority('ckeckitem_add') 需要ckeckitem_add权限才能访问资源
        -->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/pages/**"  access="isAuthenticated()" />
        <!--
			自定义登录页面
            	login-page:指定登录页面访问URL
			    username-parameter:登录页面指定的用户名的name属性名，默认值为 username
			    password-parameter:登录页面指定的密码的name属性名，默认值为 password
			    login-processing-url:登录请求的url，默认值为 /login
				default-target-url:认证成功后默认跳转的url
				authentication-failure-url:认证失败后跳转的url
            	 always-use-default-target : 如果登录成功了，则永远跳转到 default-target-url
					后台管理系统中，一般 always-use-default-target 值设置为true
					前台系统中，一般不设置
        -->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/pages/main.html"
                authentication-failure-url="/login.html"
                always-use-default-target="true"
        />


        <!--
		跨站伪造请求
          csrf：对应CsrfFilter过滤器
          disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
        -->
        <security:csrf disabled="true"></security:csrf>

        <!--
          logout：退出登录
          logout-url：退出登录操作对应的请求路径，默认值 /logout
          logout-success-url：退出登录后的跳转页面
        -->
        <security:logout logout-url="/logout.do"
                         logout-success-url="/login.html" invalidate-session="true"/>
    </security:http>

    <!--配置认证管理器-->
    <security:authentication-manager>
        <!--配置认证提供者
			有两个要求
				1.必须是容器中一个bean的id
				2.该bean实例必须实现UserDetailsService
		-->
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <!--指定密码加密器引用-->
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--配置加密器-->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

    <bean id="springSecurityUserService"
          class="com.itheima.service.SpringSecurityUserService"/>

    <!--开启注解方式权限控制
		在目标方法上加 @PreAuthorize("hasAuthority('xxx')")
		// xxx 是指定的权限名称
	-->
    <security:global-method-security pre-post-annotations="enabled" />

</beans>